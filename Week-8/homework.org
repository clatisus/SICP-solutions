#+TITLE: Homework



* 1
#+begin_src racket
(define-class (random-generator range)
  (instance-vars (count 0))
  (method (number)
          (begin
            (set! count (+ count 1))
            (random range))))
#+end_src
* 2
#+begin_src racket
(define-class (coke-machine max-cokes price)
  (instance-vars (cokes 0) (money 0))
  (method (fill new-cokes)
          (if (< max-cokes (+ cokes new-cokes))
              "Don't have that much place!!"
              (set! cokes (+ cokes new-cokes))))
  (method (deposit income)
          (set! money (+ money income)))
  (method (coke)
          (cond ((< money price) "Not Enough Money!!")
                ((< cokes 1) "Machine Empty!!")
                (else (- money price)))))
#+end_src
* 3
With stklos I need to define =nth= and =remove=.

#+name: nth,remove
#+begin_src racket
(define (nth n seq)
  (if (= 0 n)
      (car seq)
      (nth (- n 1) (cdr seq))))


(define (remove elem seq)
  (if (eq? elem (car seq))
      (cdr seq)
      (cons (car seq)
            (remove elem (cdr seq)))))
#+end_src


An ordered deck

#+name: od
#+begin_src racket
(define ordered-deck '(
                       AS 2S 3S 4S 5S 6S 7S 8S 9S 10S JS QS KS
                       AH 2H 3H 4H 5H 6H 7H 8H 9H 10H JH QH KH
                       AD 2D 3D 4D 5D 6D 7D 8D 9D 10D JD QD KD
                       AC 2C 3C 4C 5C 6C 7C 8C 9C 10C JC QC KC))
#+end_src


#+begin_src racket
(define (shuffle deck)
  (if (null? deck)
      '()
      (let ((card (nth (random (length deck)) deck)))
        (cons card (shuffle (remove card deck))))))

(define-class (deck)
  (instance-vars (cards (shuffle ordered-deck)))
  (method (empty?)
          (null? cards))
  (method (deal)
          (if (ask self 'empty?)
              '()
              (begin
                (let ((ret (car cards)))
                  (set! cards (cdr cards))
                  ret)))))
#+end_src

Debug

I don't know why but =do-times= didn't work properly so I implemented. *Without knowledge of macros* sorry for your eyes.
#+begin_src racket
(define obj (instantiate deck))

(define (do-times n exp)
  (if (= n 0)
      #t
      (begin
        (eval exp)
        (do-times (- n 1) exp))))

(do-times 51 '(print (ask obj 'deal)))
(print  (ask obj 'empty?))
(print  (ask obj 'deal))
(print  (ask obj 'empty?))
#+end_src

I need to wrap with =print= because stklos doesn't give return values.
* 4
#+begin_src racket
(define (miss-manners obj)
  (method (please message arg)
          (ask obj message arg)))
#+end_src
* Extra
This problem is called diamond problem.

Example is [[https://en.wikipedia.org/wiki/Multiple_inheritance][from]]

#+begin_src plantuml
Object ==|> Rectangle
Object ==|> Clickable
Rectangle  ==> Button
Clickable ==> Button
#+end_src

Assume that we need to respond =area= message it's more appropriate that Use =Rectangle='s =area= instead of =Object='s area.
