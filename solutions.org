#+TITLE: Solutions
#+PROPERTY: header-args:racket  :lang sicp :exports both
#+PROPERTY: header-args:racket+ :tangle (concat (car (org-get-outline-path)) "/" (nth 4 (org-heading-components)) ".rkt") :mkdirp yes

* Chapter-1
** 1.01

#+begin_src racket
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

#+RESULTS:
#+begin_example
10
12
8
3
6
19
#f
4
16
6
16
#+end_example
** 1.02

#+begin_src racket
(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))
#+end_src

#+RESULTS:
: -37/150
** TODO 1.03
#+begin_quote
Define a procedure that takes three numbers
as arguments ...
#+end_quote

Can't use simple recursion in simple list, need something like =&rest=
in elisp.

#+begin_src racket
(define (sum-of-larger-two x y z)
  (- (+ (square x) (square y) (square z))
     (square (min x y z))))

(define (square x) (* x x))

(sum-of-larger-two 3 4 5)
#+end_src

#+RESULTS:
: 41
** 1.04

It does $a + |b|$
#+begin_src racket
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

(display (a-plus-abs-b 1 5)) (newline)
(display (a-plus-abs-b -1 5)) (newline)
(display (a-plus-abs-b 1 -5)) (newline)
(display (a-plus-abs-b -1 -5)) (newline)
#+end_src

#+RESULTS:
: 6
: 4
: 6
: 4
** 1.05

Goes to infinite loop in scheme interpreters, because they use applicative order by default.

#+begin_src racket
(define (p) (p))
(define (test x y)
  (if (= x 0)
      0
      y))

(test 0 (p))
#+end_src
*** Normal Order
:PROPERTIES:
:header-args:racket :tangle no
:END:

Subsitute body of compound procedure
#+begin_src racket :tangle no
(if (= x 0)
    0
    y)
#+end_src
Replace =formal parameteres= with actual arguments
#+begin_src racket :tangle no
(if (= 0 0)
    0
    (p))
#+end_src
Then evaluate =special form=
We assumed that if is same.
#+begin_quote
... (Assume that the evaluation 27 rule for the special form if is the same
whether the interpreter is using normal or applicative order: ..
#+end_quote

Because it's special form =(p)= will never evaluated.
*** Applicative Order
First arguments will evaluted.
=(p)= Compound procedure will create an infinite recursion.
** 1.06

=new-if= is compound procedure which obeys applicative evaluation rules.
So both clauses will have evaluated before substition for =new-if=.

#+begin_src racket
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(new-if (< 3 5) (display "Then\n") (display "Else"))
#+end_src

#+RESULTS:
: Then
: Else

In below code for all =(good-enough? guess x)= values  =else-clause= will be evaluted.
And it's recursive, so there will be infinite recursion.

#+begin_src racket
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src
** 1.07

#+name: sqrt-functions
#+begin_src racket :tangle no
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (square x) (* x x))

(define (sqrt x)
  (sqrt-iter 1.0 x))
#+end_src

For Very Small Numbers

#+begin_src racket :noweb eval
<<sqrt-functions>>
(sqrt 0.0000000000000000000000001232131)
(sqrt 0.000000000000000000000001)
#+end_src

#+RESULTS:
: 0.03125
: 0.03125

For Big Numbers

#+begin_src racket :noweb eval
<<sqrt-functions>>
(sqrt 10000000000000000000000000000000000000000000000000)
(sqrt 1000000000000000000000000000000000000000000000000000000000000000000000)
#+end_src

#+RESULTS:
: Can't find ...
: Can't find ...

To understand reason can run with

#+begin_src racket
(define (improve guess x)
  (display "-")
  (average guess (/ x guess)))
#+end_src

With this simple change you can understand how many times =guess= was called.
In very big numbers =-= becomes longer, in smaller number becomes shorter (eventually becomes 5).
In very small numbers =0.001= is so small that first guess (=1=) will be halved untill it become =0.03125= because
Because value of =good-enough?= is already smaller than =0.001=.

#+begin_src racket :noweb no-export
<<sqrt-functions>>
(- (square 0.03125) 0)
#+end_src

#+RESULTS:
: 0.0009765625

Can predict that it's harder to satisfy the =0.001= =good-enough?= criteria in big numbers.
** 1.08

#+begin_src racket
(define (cube-root-iter guess x)
  (if (good-enough? guess x)
      guess
      (cube-root-iter (improve guess x) x)))

(define (improve guess x)
  (/ (+
      (/ x (* guess guess))
      (* 2 guess))
     3))

(define (good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.001))

(define (cube x) (* x x x))

(define (cube-root x)
  (cube-root-iter 1.0 x))

(cube-root 8.0)
#+end_src

#+RESULTS:
: 2.000004911675504
