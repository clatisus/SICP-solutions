#+TITLE: Solutions
#+PROPERTY: header-args:racket  :lang sicp :exports both

* Building Abstractions with Procedures
** The Elements of Programming
*** 1.1
#+begin_src racket
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

#+RESULTS:
#+begin_example
10
12
8
3
6
19
#f
4
16
6
16
#+end_example
*** 1.2
#+begin_src racket
(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))
#+end_src

#+RESULTS:
: -37/150
*** TODO 1.3
#+begin_quote
Define a procedure that takes three numbers
as arguments ...
#+end_quote
Can't use simple recursion in simple list, need something like =&rest=
in elisp.
#+begin_src racket
(define (sum-of-larger-two x y z)
  (- (+ (square x) (square y) (square z))
     (square (min x y z))))

(define (square x) (* x x))

(sum-of-larger-two 3 4 5)
#+end_src

#+RESULTS:
: 41
*** 1.4
It does $a + |b|$
#+begin_src racket
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

(display (a-plus-abs-b 1 5)) (newline)
(display (a-plus-abs-b -1 5)) (newline)
(display (a-plus-abs-b 1 -5)) (newline)
(display (a-plus-abs-b -1 -5)) (newline)
#+end_src

#+RESULTS:
: 6
: 4
: 6
: 4
*** 1.5
Goes to infinite loop in scheme interpreters, because they use applicative order by default.
#+begin_src racket
(define (p) (p))
(define (test x y)
  (if (= x 0)
      0
      y))

(test 0 (p))
#+end_src
**** Normal Order
Subsitute body of compound procedure
#+begin_src racket
(if (= x 0)
    0
    y)
#+end_src
Replace =formal parameteres= with actual arguments
#+begin_src racket
(if (= 0 0)
    0
    (p))
#+end_src
Then evaluate =special form=
We assumed that if is same.
#+begin_quote
... (Assume that the evaluation 27 rule for the special form if is the same
whether the interpreter is using normal or applicative order: ..
#+end_quote

Because it's special form =(p)= will never evaluated.
**** Applicative Order
First arguments will evaluted.
=(p)= Compound procedure will create an infinite recursion.
