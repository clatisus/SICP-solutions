# -*- org-export-babel-evaluate: nil -*-
#+TITLE: Solutions
#+PROPERTY: header-args:racket  :lang sicp :exports both
#+PROPERTY: header-args:racket+ :tangle (concat (car (org-get-outline-path)) "/" (nth 4 (org-heading-components)) ".rkt") :mkdirp yes

* Chapter-1
** 1.01

#+begin_src racket
10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b)))
    b
    a)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
(+ 2 (if (> b a) b a))
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1))
#+end_src

#+RESULTS:
#+begin_example
10
12
8
3
6
19
#f
4
16
6
16
#+end_example
** 1.02

#+begin_src racket
(/ (+ 5
      4
      (- 2
         (- 3
            (+ 6
               (/ 4 5)))))
   (* 3
      (- 6 2)
      (- 2 7)))
#+end_src

#+RESULTS:
: -37/150
** TODO 1.03
#+begin_quote
Define a procedure that takes three numbers
as arguments ...
#+end_quote

Can't use simple recursion in simple list, need something like =&rest=
in elisp.

#+begin_src racket
(define (sum-of-larger-two x y z)
  (- (+ (square x) (square y) (square z))
     (square (min x y z))))

(define (square x) (* x x))

(sum-of-larger-two 3 4 5)
#+end_src

#+RESULTS:
: 41
** 1.04

It does $a + |b|$
#+begin_src racket
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

(display (a-plus-abs-b 1 5)) (newline)
(display (a-plus-abs-b -1 5)) (newline)
(display (a-plus-abs-b 1 -5)) (newline)
(display (a-plus-abs-b -1 -5)) (newline)
#+end_src

#+RESULTS:
: 6
: 4
: 6
: 4
** 1.05

Goes to infinite loop in scheme interpreters, because they use applicative order by default.

#+begin_src racket :eval never
(define (p) (p))
(define (test x y)
  (if (= x 0)
      0
      y))

(test 0 (p))
#+end_src
*** Normal Order
:PROPERTIES:
:header-args:racket: :tangle no
:END:

Subsitute body of compound procedure
#+begin_src racket
(if (= x 0)
    0
    y)
#+end_src
Replace =formal parameteres= with actual arguments
#+begin_src racket
(if (= 0 0)
    0
    (p))
#+end_src
Then evaluate =special form=
We assumed that if is same.
#+begin_quote
... (Assume that the evaluation 27 rule for the special form if is the same
whether the interpreter is using normal or applicative order: ..
#+end_quote

Because it's special form =(p)= will never evaluated.
*** Applicative Order
First arguments will evaluted.
=(p)= Compound procedure will create an infinite recursion.
** 1.06

=new-if= is compound procedure which obeys applicative evaluation rules.
So both clauses will have evaluated before substition for =new-if=.

#+begin_src racket
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(new-if (< 3 5) (display "Then\n") (display "Else"))
#+end_src

#+RESULTS:
: Then
: Else

In below code for all =(good-enough? guess x)= values  =else-clause= will be evaluted.
And it's recursive, so there will be infinite recursion.

#+begin_src racket
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+end_src
** 1.07

#+name: sqrt-functions
#+begin_src racket :tangle no
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (square x) (* x x))

(define (sqrt x)
  (sqrt-iter 1.0 x))
#+end_src

For Very Small Numbers

#+begin_src racket :noweb eval
<<sqrt-functions>>
(sqrt 0.0000000000000000000000001232131)
(sqrt 0.000000000000000000000001)
#+end_src

#+RESULTS:
: 0.03125
: 0.03125

For Big Numbers

#+begin_src racket :noweb eval
<<sqrt-functions>>
(sqrt 10000000000000000000000000000000000000000000000000)
(sqrt 1000000000000000000000000000000000000000000000000000000000000000000000)
#+end_src

#+RESULTS:
: Can't find ...
: Can't find ...

To understand reason can run with

#+begin_src racket
(define (improve guess x)
  (display "-")
  (average guess (/ x guess)))
#+end_src

With this simple change you can understand how many times =guess= was called.
In very big numbers =-= becomes longer, in smaller number becomes shorter (eventually becomes 5).
In very small numbers =0.001= is so small that first guess (=1=) will be halved untill it become =0.03125= because
Because value of =good-enough?= is already smaller than =0.001=.

#+begin_src racket :noweb no-export
<<sqrt-functions>>
(- (square 0.03125) 0)
#+end_src

#+RESULTS:
: 0.0009765625

Can predict that it's harder to satisfy the =0.001= =good-enough?= criteria in big numbers.
** 1.08

#+begin_src racket
(define (cube-root-iter guess x)
  (if (good-enough? guess x)
      guess
      (cube-root-iter (improve guess x) x)))

(define (improve guess x)
  (/ (+
      (/ x (* guess guess))
      (* 2 guess))
     3))

(define (good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.001))

(define (cube x) (* x x x))

(define (cube-root x)
  (cube-root-iter 1.0 x))

(cube-root 8.0)
#+end_src

#+RESULTS:
: 2.000004911675504
** 1.09
I don't know why but I can't change value of =+= in racket.
So I changed =+= to =sum= from book.

This is recursive process because there are waiting calls (=deferred operations=).
And because it calls itself in syntax it's recursive procedure too.
#+begin_src racket :lang racket
(define (inc x) (+ x 1))
(define (dec x) (- x 1))

(define (sum a b)
  (if (= a 0)
      b
      (inc (sum (dec a) b))))
(+ 4 5)
#+end_src
: 9

And because it calls itself in syntax it's recursive procedure.
But it's iterative process, because the way program evole is like rectangle, block.
Process has state that can be paused and could be resume.

#+begin_src racket :lang racket
(define (inc x) (+ x 1))
(define (dec x) (- x 1))

(define (sum a b)
  (if (= a 0)
      b
      (sum (dec a) (inc b))))

(sum 4 5)
#+end_src

#+RESULTS:
: 9
** 1.10
:PROPERTIES:
:header-args:racket: :tangle no
:END:
#+name: ackermann
#+begin_src racket
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))
#+end_src

#+begin_src racket :noweb eval :lang racket
<<ackermann>>
(A 1 10)
(A 2 4)
(A 3 3)
#+end_src

#+RESULTS:
: 1024
: 65536
: 65536
*** (f n)

$f(n) = 2n$
#+begin_src racket
(define (f n) (A 0 n))
#+end_src

*** (g n)

#+begin_src racket
(define (g n) (A 1 n))
#+end_src

Let's think =y=0= and =y=1= later.
=cond= will result in else condition.

#+begin_src racket
(A 0 (A 1 (- y 1)))
(A 0 (A 0 (A 1 (- y 1))))
#+end_src

We know that =(A 0 n)= is =(* 2 n)=

#+begin_src racket
(* 2 (A 1 (- y 1)))
(* 2 (* 2(A 1 (- y 1))))
#+end_src

Recursion will end when =y=0= or =y=1=

Therer will be =y= calls.

#+begin_src racket :lang racket
(require racket/trace)
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))
(trace A)
(A 1 4)
#+end_src

#+RESULTS:
#+begin_example
>(A 1 4)
> (A 1 3)
> >(A 1 2)
> > (A 1 1)
< < 2
> >(A 0 2)
< <4
> (A 0 4)
< 8
>(A 0 8)
<16
16
#+end_example

So $g(n) = 2^n$

*** (h n)

It can seen that each number will go through n times. because we stop at =y=1=

#+begin_src racket
(A 2 n)
(A 1 (A 2 (- n 1)))
(A 1 (A 1 (A 2 (- n 1))))
#+end_src

Since we know what =(A 1 n)= and =(A 0 n)= we only need to find when all =(A 2 n)= have finished.

The point is where =(A 2 1)= have called.

It'll look like

#+begin_src racket :lang racket :noweb eval
<<ackermann>>
(require racket/trace)
(trace A)
(A 2 3)
#+end_src

#+RESULTS:
#+begin_example
>(A 2 3)
> (A 2 2)
> >(A 2 1)
< <2
> (A 1 2)
> >(A 1 1)
< <2
> (A 0 2)
< 4
>(A 1 4)
> (A 1 3)
> >(A 1 2)
> > (A 1 1)
< < 2
> >(A 0 2)
< <4
> (A 0 4)
< 8
>(A 0 8)
<16
16
#+end_example

To make it simpler can think like this
#+begin_src racket
(A 2 3)
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 2 1))))
#+end_src

After that it is just

\[2^{2^{2^{2}}}\]

So informally we can say that $g(n) = 2^{2^{2^{...}}}... n times$

Also we can say

\[h(1) = 2\]
\[h(n) = 2^{h(n -1)}\]

#+begin_src racket :lang racket :noweb eval
<<ackermann>>
(A 2 1)
(A 2 2)
(A 2 3)
#+end_src

#+RESULTS:
: 2
: 4
: 16
** 1.11
Question asks different process types, not procedure types so can (and probably must in scheme)
use (tail) recursion.

Recursive
#+begin_src racket
(define (rec-f n)
  (if (< n 3)
      n
      (+ (rec-f (- n 1))
         (* 2 (rec-f (- n 2)))
         (* 3 (rec-f (- n 3))))))
#+end_src

Iterative
#+begin_src racket :lang racket
(define (inc x) (+ x 1))

(define (it-f n)
  (define (iter count fn-3 fn-2 fn-1)
    (define fn ;; Next item
      (+ fn-1
         (* 2 fn-2)
         (* 3 fn-3)))
    (cond
      ((< n 3) n)
      ((= count (- n 3)) fn)
      (else
       (iter (inc count)
             fn-2 fn-1 fn))))
  (iter 0 0 1 2))
#+end_src
** 1.12
#+begin_src racket
(define (pascal n)
  "Draws n depth pascal triangle"
  (define (p-value row col)
    (cond
      ((or (= row 1)
           (= col 1)
           (= row col)) 1)
      (else
       (+ (p-value (- row 1) (- col 1))
          (p-value (- row 1) col)))))

  (define (n-times-i n func)
    (define (iter count)
      (cond ((= n count) 1) ;; Random value 1
            (else
             (func (+ 1 count)) ;; Pascal triangle uses 1-based index
             (iter (+ 1 count)))))
    (iter 0))

  (define (print-rows)
    (define (print-row row)
      (define (print-cols)
        (define (print-col col)
          (display (p-value row col))
          (display " "))
        (n-times-i row print-col))
      (n-times-i (- n row) (lambda (x) (display " ")))
      (print-cols) ;; Print all columns
      (display "\n"));; Then print a newline)
    (n-times-i n print-row))
  (print-rows))

(pascal 5)
#+end_src

#+RESULTS:
:     1
:    1 1
:   1 2 1
:  1 3 3 1
: 1 4 6 4 1
** 1.15
#+begin_src racket :lang racket
(require racket/trace)
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))
(trace sine)
(trace p)

(sine 12.15)
#+end_src

#+RESULTS:
#+begin_example
>(sine 12.15)
> (sine 4.05)
> >(sine 1.3499999999999999)
> > (sine 0.44999999999999996)
> > >(sine 0.15)
> > > (sine 0.049999999999999996)
< < < 0.049999999999999996
> > >(p 0.049999999999999996)
< < <0.1495
> > (p 0.1495)
< < 0.4351345505
> >(p 0.4351345505)
< <0.9758465331678772
> (p 0.9758465331678772)
< -0.7895631144708228
>(p -0.7895631144708228)
<-0.39980345741334
-0.39980345741334
#+end_example

It can be seen that it applied 5 times.

We are dividing angle to 3 every time.
If we make a number 3 times larger we need to divide one more time.
It's $\theta(\log_3(n))$ in time.
Space complexity is about x axis of the process.
We are waiting new values in =(sine)= so it's $\theta(\log_3(n))$ in space too.
** 1.16
#+begin_src racket
(define (even? x)
  (= (remainder x 2) 0))

(define (square x) (* x x))

(define (fast-exp b n) ;; b^n
  (define (iter a b n) ;; b is current multiplied value. a is product
    (cond
      ((= n 0) a)
      ((even? n) (iter a (square b) (/ n 2)))
      (else
       (iter (* a b) b (- n 1)))))
  (iter 1 b n))

(fast-exp 2 3)
#+end_src

#+begin_src C :var base=2  :var n=5 :var product=1
for(int i = n; i >0;){
    if(i%2 == 0){
        base = base * base;
        i /= 2;
    }
    else{
        product *= base;
        i--;
    }
}
printf("%d\n", product);
#+end_src

#+RESULTS:
: 32
** 1.17
In this program I assume that little one will halve more rapidly to one.
But something like this can happen, =(product 15 16)= Bigger one will be 1 in 4 steps smaller one will be 1 in 5 steps.

#+begin_src racket
(define (even? x)
  (= (remainder x 2) 0))

(define (double x) (* x 2))
(define (halve x)  (/ x 2))

(define (product a b)
  (define (prod times big)
    (cond
      ((= 0 times) 0)
      ((even? times) (prod (halve times) (double big)))
      (else (+ big (prod (- times 1) big)))))

  (if (< a b)
      (prod a b)
      (prod b a)))

(product 10 4)
#+end_src

#+RESULTS:
: 40
** 1.18
#+begin_src racket
(define (double x) (* x 2))
(define (halve x)  (/ x 2))

(define (product a b)
  (define (iter times big sum)
    (cond ((= times 0) sum)
          ((even? times) (iter (halve times) (double big) sum))
          (else
           (iter (- times 1) big (+ sum big)))))
  (if (< a b)
      (iter a b 0)
      (iter b a 0)))
#+end_src
** 1.20
In Applicative Order
=(remainder a b)= evaluated 4 times
#+begin_src racket :lang racket
(require racket/trace)
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(trace gcd)
(gcd 206 40)
#+end_src

#+RESULTS:
: >(gcd 206 40)
: >(gcd 40 6)
: >(gcd 6 4)
: >(gcd 4 2)
: >(gcd 2 0)
: <2
: 2

In Normal Order
Trick is in =(if)= everything beside =(remainder)= become pritimitive so it need to be evaluated.
[[http://community.schemewiki.org/?sicp-ex-1.20][It's 18 times]]
** 1.21
#+name: prime-functions
#+begin_src racket
(define (square x) (* x x))

(define (divides? a b) (= (remainder b a) 0))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (smallest-divisor n) (find-divisor n 2))

(define (prime? n)
  (= n (smallest-divisor n)))
#+end_src

#+RESULTS: prime-functions

#+begin_src racket :noweb eval
<<prime-functions>>
(smallest-divisor 199)
(smallest-divisor 1999)
(smallest-divisor 19999)
#+end_src

#+RESULTS:
: 199
: 1999
: 7
** 1.22
#+begin_src racket :noweb eval
<<prime-functions>>
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes min-val)

  (define (search cur-val)
    (if (prime? cur-val)
        (timed-prime-test cur-val)
        (search (+ 2 cur-val)))) ;; No need for optimization question wants this `primality of consecutive odd integers`

  (define (next-odd x)
    (if (= (remainder x 2) 0)
        (+ x 1)
        (+ x 2)))

  (search (next-odd min-val)))



(search-for-primes 1000000)
(search-for-primes 1000000000)
(search-for-primes 1000000000000)
#+end_src

#+RESULTS:
:
: 1000003 *** 12
: 1000000007 *** 397
: 1000000000039 *** 11569

Order of growth in time is $\theta(\sqrt{n})$ each should take $\sqrt{1000} \approx 31.6227$ times more time.
Reason for using larger number is avoiding dealing with small number inconsistencies.
** 1.23
#+begin_src racket :noweb eval
<<prime-functions>>
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes min-val)

  (define (search cur-val)
    (if (prime? cur-val)
        (timed-prime-test cur-val)
        (search (+ 2 cur-val)))) ;; No need for optimization question wants this `primality of consecutive odd integers`

  (define (next n)
    (if (= n 2)
        3
        (+ n 2)))

  (search (next min-val)))
#+end_src

I've already done this kind of code in 1.22 so there won't be any performance change.
** 1.24
#+name: fermat
#+begin_src racket
(define (square x) (* x x))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
#+end_src

#+begin_src racket :noweb yes
<<fermat>>
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 10)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes min-val)

  (define (search cur-val)
    (if (fast-prime? cur-val 10)
        (timed-prime-test cur-val)
        (search (+ 2 cur-val)))) ;; No need for optimization question wants this `primality of consecutive odd integers`

  (define (next-odd x)
    (if (= (remainder x 2) 0)
        (+ x 1)
        (+ x 2)))

  (search (next-odd min-val)))


(search-for-primes 1000000)
(search-for-primes 1000000000)
#+end_src

#+RESULTS:
:
: 1000003 *** 8
: 1000000007 *** 11

Difference with normal prime
|               | Order of Growth | 1000003 | 1000000007 |
| =(prime?)=      | $\theta(n)$          |      12 |        397 |
| =(fast-prime?)= | $\theta(\log_2(n))$  |       8 |         11 |


Can see why I choose larger number at 1.22  on =1000003= column. It's not very informative about data.
** 1.25
#+begin_src racket
(define (square x) (* x x))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define (expmod base exp m)
  (remainder (fast-expt base exp) m))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(fast-prime? 123123123 10)
#+end_src

#+RESULTS:
: Long to compute

#+begin_src racket :noweb eval
<<fermat>>
(fast-prime? 123123123 10)
#+end_src

#+RESULTS:
: #f

Problem is value of =(fast-exp)= is huge.
We are reducing time of finding huge value it's still huge.

On the other hand normal =(expmod)= takes reaminder of value each step.
That's why it's not that big.
** 1.26
Normal =(expmod)= is this.
#+begin_src racket
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
#+end_src

This is the Louis's version
#+begin_src racket
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (* (expmod base (/ exp 2) m)
                       (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base
                       (expmod base (- exp 1) m))
                    m))))

#+end_src

Difference is interpreter first evaluates operand and apply procedure on argument(applicative order).
So =(expmod base (/ exp 2) m)= won't call twice.
Processs had an $\theta(\log_2(n))$ order of growth, it's reason is dividing 2 in each step.
Since we are calling it twice we neutralized it so now it's $\theta(n)$.
** 1.27
Carmichael Numbers listed in footnote: 561, 1105, 1729, 2465, 2821, 6601

#+begin_src racket :noweb eval
(define (square x) (* x x))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))

  (define (iter cur-n)
    (cond ((= cur-n n) 1)
    (else (iter (+ 1 cur-n))
          (try-it cur-n))))
  (iter 2))

(fermat-test 561)
(fermat-test 1105)
(fermat-test 1729)
(fermat-test 2465)
(fermat-test 2821)
(fermat-test 6601)
#+end_src

#+RESULTS:
: #t
: #t
: #t
: #t
: #t
: #t
** 1.28
With random number a less than n, $a^{n-1} \equiv  1 \mod n$

#+name: mr-test
#+begin_src racket :tangle no :eval never
(define (mr-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))
#+end_src

For $a \ne 1 , a \neq n-1$ , If $a^2 \equiv 1 \mod n$ then n is not prime.
Modify the =(expmod)=

#+namem: nt-sqrt
#+begin_src racket :tangle no :eval never
(define (nt-sqrt-mod a n) ;; non-trivial-sqaure-root-mod-n
  (if (or (= a 1) (= a (- n 1)))
      false
      (= (remainder (square a) n) 1)))
#+end_src

Question says add it in =(square)=

#+begin_src racket :noweb yes
(define (square x) (* x x))

(define (mr-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (nt-sqrt-mod a n) ;; non-trivial-sqaure-root-mod-n
  (if (or (= a 1) (= a (- n 1)))
      false
      (= (remainder (square a) n) 1)))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (if (nt-sqrt-mod base m)
             0
             (remainder
              (square (expmod base (/ exp 2) m))
              m)))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))

(define (mr-prime? n times)
  (cond ((= times 0) true)
        ((mr-test n) (mr-prime? n (- times 1)))
        (else false)))

;; 10 is random value
(mr-prime? 68 10)
#+end_src

#+RESULTS:
: #f
