# -*- org-export-babel-evaluate: nil -*-
#+TITLE: Solutions
#+PROPERTY: header-args:racket  :lang sicp :exports both
#+PROPERTY: header-args:racket+ :tangle (concat (nth 4 (org-heading-components)) ".rkt")
#+PROPERTY: header-args:racket+ :noweb no-export

* 3.01
Last main is the return value.
In =begin= last argument is the return value, previous ones are probably mutating (destructive) functions.

#+begin_src racket
(define (make-accumulator main)
  (lambda (income)
    (begin
      (set! main (+ main income))
      main)))

(define acc (make-accumulator 100))
(acc 0)
(acc 10)
#+end_src

#+RESULTS:
: 100
: 110
* 3.02
#+begin_src racket
(define (make-monitored f)
  (let ((count 0))
    (lambda (arg)
      (cond ((eq? arg 'how-many-calls?) count)
            ((eq? arg 'reset-count) (set! count 0))
            (else
             (begin
               (set! count (+ count 1))
               (f arg)))))))

(define s (make-monitored sqrt))
(s 100)
(s 'how-many-calls?)
(s 81)
(s 'how-many-calls?)
#+end_src

#+RESULTS:
: 10
: 1
: 9
: 2
