# -*- org-export-babel-evaluate: nil -*-
#+TITLE: Solutions
#+PROPERTY: header-args:racket  :lang sicp :exports both
#+PROPERTY: header-args:racket+ :tangle (concat (nth 4 (org-heading-components)) ".rkt")
#+PROPERTY: header-args:racket+ :noweb no-export

* 3.01
Last main is the return value.
In =begin= last argument is the return value, previous ones are probably mutating (destructive) functions.

#+begin_src racket
(define (make-accumulator main)
  (lambda (income)
    (begin
      (set! main (+ main income))
      main)))

(define acc (make-accumulator 100))
(acc 0)
(acc 10)
#+end_src

#+RESULTS:
: 100
: 110
* 3.02
#+begin_src racket
(define (make-monitored f)
  (let ((count 0))
    (lambda (arg)
      (cond ((eq? arg 'how-many-calls?) count)
            ((eq? arg 'reset-count) (set! count 0))
            (else
             (begin
               (set! count (+ count 1))
               (f arg)))))))

(define s (make-monitored sqrt))
(s 100)
(s 'how-many-calls?)
(s 81)
(s 'how-many-calls?)
#+end_src

#+RESULTS:
: 10
: 1
: 9
: 2
* 3.03
#+begin_src racket
(define (make-account balance passwd)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)

  (define (passwd-error arg)             ; Need arg because dispatched procedure takes argument
    "Incorrect password")

  (define (dispatch *** m)              ; Because passwords look like *** , lisp joke
    (cond ((not  (eq? *** passwd)) passwd-error)
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: MAKE-ACCOUNT"
                       m))))
  dispatch)

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 50)

#+end_src

#+RESULTS:
: 60
: "Incorrect password"
* 3.04
#+begin_src racket :lang racket
(define (make-account balance passwd)
  (let ((try-time 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (passwd-error arg)             ; Need arg because dispatched procedure takes argument
      (begin
        (set! try-time (+ try-time 1))
        (display try-time)
        (display " ")
        "Incorrect password"))
    (define (call-the-cops arg)
      "Naaani Naaani Naaani")

    (define (dispatch *** m)              ; Because passwords look like *** , lisp joke
      (define brute-force? (lambda () (= try-time 7)))
      (cond ((brute-force?) call-the-cops)
            ((not  (eq? *** passwd)) passwd-error)
            ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            (else (error "Unknown request: MAKE-ACCOUNT"
                         m))))
    dispatch))

(define acc (make-account 100 'secret-password))
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
((acc 'some-other-password 'deposit) 50)
#+end_src

#+RESULTS:
: 1 "Incorrect password"
: 2 "Incorrect password"
: 3 "Incorrect password"
: 4 "Incorrect password"
: 5 "Incorrect password"
: 6 "Incorrect password"
: 7 "Incorrect password"
: "Naaani Naaani Naaani"
* 3.05
#+name: monte-carlo
#+begin_src racket :tangle no :eval no
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))
#+end_src

We need float random value because if we say get random value in th range of [-1,1] it'll give wrong results.
Also use =#lang racket=
#+name: random-in-range
#+begin_src racket :tangle no :eval no
 (define (random-in-range low high)
   (let ((range (- high low)))
     (+ low (* (random) range))))
#+end_src


#+begin_src racket :lang racket
<<monte-carlo>>
<<random-in-range>>
(define (estimate-integral P x1 x2 y1 y2 trial)
  (let ((test (lambda ()
                (P (random-in-range x1 x2)
                   (random-in-range y1 y2))))
        (rect-area (abs (* (- x2 x1)
                          (- y2 y1)))))
    (* rect-area
       (monte-carlo trial test))))

;; (x-1)^2 + (y-1)^2 <= 1
(define (unit-circle x y) ; Kind of in-unit-circle?
  (define (square x) (* x x))
  (<= (+ (square x)
         (square y))
      1))

(estimate-integral unit-circle -1.0 1.0 -1.0 1.0 10000)
#+end_src

#+RESULTS:
: 3.1336
* 3.06
For simple debug I declared these
#+name: defs
#+begin_src racket :tangle no :eval no
(define random-init 100)
(define (rand-update x) (+ x 1)) ; :D
#+end_src

#+begin_src racket
<<defs>>
(define rand
  (let ((x random-init))
    (define (generate)
      (set! x (rand-update x))
      x)
    (define (reset new)
      (set! x new)
      x)
    (define  (dispatch sym)
      (cond ((eq? sym 'generate) (generate))
            ((eq? sym 'reset) reset)
            (else (error "Invalid message"))))
    dispatch))

(rand 'generate)
((rand 'reset) 500)
(rand 'generate)
#+end_src

#+RESULTS:
: 101
: 500
: 501
* 3.07
#+begin_src racket
(define (make-account balance passwd)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)

  (define (passwd-error arg)             ; Need arg because dispatched procedure takes argument
    "Incorrect password")

  (define (dispatch *** m)              ; Because passwords look like *** , lisp joke
    (cond ((not  (eq? *** passwd)) passwd-error)
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: MAKE-ACCOUNT"
                       m))))
  dispatch)

(define (make-joint main m-p n-p)
  (lambda (*** message)
    (if (eq? *** n-p)
        (main m-p message)
        (error "Wrong new account password!"))))

(define peter-acc (make-account 100 'p))
((peter-acc 'p 'withdraw) 40)
((peter-acc 'wrong 'deposit) 50)
(define paul-acc (make-joint peter-acc 'p 'new-p))
((paul-acc 'new-p 'withdraw) 20)
#+end_src

#+RESULTS:
: 60
: "Incorrect password"
: 40
* 3.08
Finding normal order for testing

#+begin_src racket
(+ (begin (display "Left\n") 1)
   (begin (display "Right\n") 2))
#+end_src

#+RESULTS:
: Left
: Right
: 3


#+name: f
#+begin_src racket :tangle no :eval no
(define f
  (let ((prev 0))
    (lambda (x)
      (let ((cur prev))
        (begin
          (set! prev x)
          cur)))))
#+end_src

Left to right
#+begin_src racket
<<f>>
(+ (f 0) (f 1))
#+end_src

#+RESULTS:
: 0

Right to left (emulation)
#+begin_src racket :noweb eval
<<f>>
(+ (f 1) (f 0))
#+end_src

#+RESULTS:
: 1
* TODO 3.09 :plantuml:
This is good enough
http://community.schemewiki.org/?sicp-ex-3.9

Do it in plantuml
